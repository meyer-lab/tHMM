pipeline {
  agent any
  stages {
    stage('Clean') {
      steps {
        sh 'git clean -ffdx'
        sh 'make clean'
      }
    }
    stage('Test')  {
      steps {
        sh 'make testcover'
        junit testResults: 'junit.xml', healthScaleFactor: 100.0
        cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }
    }
    stage('Lint')  { steps { sh '(pylint --rcfile=.pylintrc lineage > pylint.log || echo "pylint exited with $?")' } }
    stage('Doc')   { steps { sh 'make docs' } }
    stage('Build') { steps { sh 'make manuscript/manuscript.pdf -j 8' } }
    stage('Report') {
      steps {
        archiveArtifacts artifacts: 'manuscript/manuscript.pdf', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'manuscript/figures/*.pdf', onlyIfSuccessful: true
        step([$class:'WarningsPublisher', parserConfigurations: [[parserName:'PYLint', pattern:'pylint.log']],
          unstableTotalAll:'100', usePreviousBuildAsReference:true])
        publishHTML([
          allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
          reportDir: 'doc/build', reportFiles: 'index.html',
          reportName: 'Sphinx Documentation', reportTitles: ''])
      }
    }
  }
}
