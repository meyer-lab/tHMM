pipeline {
  agent any
  stages {
    stage('Clean') {
      steps {
        sh 'git clean -ffdx'
        sh 'make clean'
      }
    }
    stage('Build/Test') {
      parallel {
        stage('Test')  { steps { sh 'make testcover' } }
        stage('Lint')  { steps { sh '(pylint --rcfile=.pylintrc polyfc > pylint.log || echo "pylint exited with $?")' } }
        stage('Doc')   { steps { sh 'make docs' } }
      }
    }
    stage('Report') {
      steps {
        junit allowEmptyResults: true, testResults: 'junit.xml'
        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: true,
          autoUpdateStability: true,
          coberturaReportFile: 'coverage.xml',
          failNoReports: true,
          failUnhealthy: true,
          failUnstable: true,
          sourceEncoding: 'UTF_8',
          zoomCoverageChart: true])
        step([$class:'TasksPublisher', canComputeNew:false, defaultEncoding:'', excludePattern:'',
          healthy:'', high:'TODO,FIXME,XXX', low:'', normal:'CITE', pattern:'**/*.py, **/*.md **/*.cpp **/*.hpp', unHealthy:''])
        step([$class:'WarningsPublisher', parserConfigurations: [[parserName:'PYLint', pattern:'pylint.log']],
          unstableTotalAll:'100', usePreviousBuildAsReference:true])
        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: 'doc/build',
          reportFiles: 'index.html',
          reportName: 'Sphinx Documentation',
          reportTitles: ''])
      }
    }
  }
}
