:py:mod:`lineage.UpwardRecursion`
=================================

.. py:module:: lineage.UpwardRecursion

.. autoapi-nested-parse::

   This file contains the methods that completes the downward recursion and evaulates the beta values.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   lineage.UpwardRecursion.get_Marginal_State_Distributions
   lineage.UpwardRecursion.get_Emission_Likelihoods
   lineage.UpwardRecursion.get_leaf_Normalizing_Factors
   lineage.UpwardRecursion.get_leaf_betas
   lineage.UpwardRecursion.get_nonleaf_NF_and_betas



.. py:function:: get_Marginal_State_Distributions(tHMMobj)

   Marginal State Distribution (MSD) matrix and recursion.
   This is the probability that a hidden state variable :math:`z_n` is of
   state k, that is, each value in the N by K MSD array for each lineage is
   the probability

   :math:`P(z_n = k)`,

   for all :math:`z_n` in the hidden state tree
   and for all k in the total number of discrete states. Each MSD array is
   an N by K array (an entry for each cell and an entry for each state),
   and each lineage has its own MSD array.

   Every element in MSD matrix is essentially sum over all transitions from any state to
   state j (from parent to daughter):

   :math:`P(z_u = k) = \sum_j(Transition(j -> k) * P(parent_{cell_u}) = j)`
   :param tHMMobj: A class object with properties of the lineages of cells
   :return: The marginal state distribution


.. py:function:: get_Emission_Likelihoods(tHMMobj, E = None)

   Emission Likelihood (EL) matrix.

   Each element in this N by K matrix represents the probability

   :math:`P(x_n = x | z_n = k)`,

   for all :math:`x_n` and :math:`z_n` in our observed and hidden state tree
   and for all possible discrete states k.
   :param tHMMobj: A class object with properties of the lineages of cells
   :param E: The emissions likelihood
   :return: The marginal state distribution


.. py:function:: get_leaf_Normalizing_Factors(tHMMobj, MSD, EL)

   Normalizing factor (NF) matrix and base case at the leaves.

   Each element in this N by 1 matrix is the normalizing
   factor for each beta value calculation for each node.
   This normalizing factor is essentially the marginal
   observation distribution for a node.

   This function gets the normalizing factor for
   the upward recursion only for the leaves.
   We first calculate the joint probability
   using the definition of conditional probability:

   :math:`P(x_n = x | z_n = k) * P(z_n = k) = P(x_n = x , z_n = k)`,
   where n are the leaf nodes.

   We can then sum this joint probability over k,
   which are the possible states z_n can be,
   and through the law of total probability,
   obtain the marginal observation distribution
   :math:`P(x_n = x) = sum_k ( P(x_n = x , z_n = k) ) = P(x_n = x)`.
   :param tHMMobj: A class object with properties of the lineages of cells
   :type tHMMobj: object
   :param EL: The emissions likelihood
   :param MSD: The marginal state distribution P(z_n = k)
   :return: normalizing factor. The marginal observation distribution P(x_n = x)


.. py:function:: get_leaf_betas(tHMMobj, MSD, EL, NF)

   Beta matrix and base case at the leaves.

   Each element in this N by K matrix is the beta value
   for each cell and at each state. In particular, this
   value is derived from the Marginal State Distributions
   (MSD), the Emission Likelihoods (EL), and the
   Normalizing Factors (NF). Each beta value
   for the leaves is exactly the probability

   :math:`beta[n,k] = P(z_n = k | x_n = x)`.

   Using Bayes Theorem, we see that the above equals

   numerator = :math:`P(x_n = x | z_n = k) * P(z_n = k)`
   denominator = :math:`P(x_n = x)`
   :math:`beta[n,k] = numerator / denominator`

   The first value in the numerator is the Emission
   Likelihoods. The second value in the numerator is
   the Marginal State Distributions. The value in the
   denominator is the Normalizing Factor.
   :param tHMMobj: A class object with properties of the lineages of cells
   :param MSD: The marginal state distribution P(z_n = k)
   :param EL: The emissions likelihood
   :param NF: normalizing factor. The marginal observation distribution P(x_n = x)
   :return: beta values. The conditional probability of states, given observations of the sub-tree rooted in cell_n


.. py:function:: get_nonleaf_NF_and_betas(tHMMobj, MSD, EL, NF, betas)

   Traverses through each tree and calculates the
   beta value for each non-leaf cell. The normalizing factors (NFs)
   are also calculated as an intermediate for determining each
   beta term. Helper functions are called to determine one of
   the terms in the NF equation. This term is also used in the calculation
   of the betas. The recursion is upwards from the leaves to
   the roots.

   :param tHMMobj: A class object with properties of the lineages of cells
   :param MSD: The marginal state distribution P(z_n = k)
   :param EL: The emissions likelihood
   :param NF: normalizing factor. The marginal observation distribution P(x_n = x)
   :param betas: beta values. The conditional probability of states, given observations of the sub-tree rooted in cell_n


