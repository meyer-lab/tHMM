:py:mod:`lineage.states.StateDistributionGaPhs`
===============================================

.. py:module:: lineage.states.StateDistributionGaPhs

.. autoapi-nested-parse::

   State distribution class for separated G1 and G2 phase durations as observation. 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lineage.states.StateDistributionGaPhs.StateDistribution



Functions
~~~~~~~~~

.. autoapisummary::

   lineage.states.StateDistributionGaPhs.fate_censor
   lineage.states.StateDistributionGaPhs.time_censor



.. py:class:: StateDistribution(bern_p1=0.9, bern_p2=0.75, gamma_a1=7.0, gamma_scale1=3, gamma_a2=14.0, gamma_scale2=6)

   For G1 and G2 separated as observations. 

   .. py:method:: rvs(self, size)

      User-defined way of calculating a random variable given the parameters of the state stored in that observation's object. 


   .. py:method:: dist(self, other)

      Calculate the Wasserstein distance between this state emissions and the given. 


   .. py:method:: dof(self)

      Return the degrees of freedom. 


   .. py:method:: pdf(self, x)

      User-defined way of calculating the likelihood of the observation stored in a cell. 


   .. py:method:: estimator(self, x, gammas)

      User-defined way of estimating the parameters given a list of the tuples of observations from a group of cells. 


   .. py:method:: assign_times(self, list_of_gens)

      Assigns the start and end time for each cell in the lineage.
      The time observation will be stored in the cell's observation parameter list
      in the second position (index 1). See the other time functions to understand.
      This is used in the creation of LineageTrees


   .. py:method:: censor_lineage(self, censor_condition, full_list_of_gens, full_lineage, **kwargs)

      This function removes those cells that are intended to be remove
      from the output binary tree based on emissions.
      It takes in LineageTree object, walks through all the cells in the output binary tree,
      applies the pruning to each cell that is supposed to be removed,
      and returns the censored list of cells.



.. py:function:: fate_censor(cell)

   User-defined function that checks whether a cell's subtree should be removed.
   Our example is based on the standard requirement that the first observation
   (index 0) is a measure of the cell's fate (1 being alive, 0 being dead).
   Clearly if a cell has died, its subtree must be removed.


.. py:function:: time_censor(cell, desired_experiment_time)

   User-defined function that checks whether a cell's subtree should be removed.
   Our example is based on the standard requirement that the second observation
   (index 1) is a measure of the cell's lifetime.
   If a cell has lived beyond a certain experiment time, then its subtree
   must be removed.


